[header]
version = "1.0"
requiredExtensions = [
    "dbankier.vscode-quick-select",
    "haberdashPI.vscode-select-by-indent",
    "haberdashPI.selection-utilities",
    "haberdashPI.move-cursor-by-argument",
    "pustelto.bracketeer",
    "wmaurer.change-case",
    "pranshuagrawal.toggle-case",
    "albymor.increment-selection",
    "pkief.markdown-checkbox",
    "edgardmessias.clipboard-manager",
    "stkb.rewrap",
    "haberdashPI.terminal-polyglot",
    "jack89ita.open-file-from-path",
    "koalamer.labeled-bookmarks",
]

[bind]
name = "Larkin Key Bindings"
description = """
This set of keybindings provides a comprehensive and well tested set of
bindings that I use in my daily work. It serves as an example of a fully
customized set of keybindings, and demonstrates the full capabilities of
master-key.

The basic logic of these commands follow that of Kakoune: motions generally
cause some region of text to be selected, and then actions modify these
selections. This is the inverse of vim's motions (`wd` instead of `dw`). This
integrates well with many of the existing VSCode extensions which operate on
selections. 

These bindings are named after the middle name of my first child.
"""

[define]
validModes = ["insert", "search", "normal", "syminsert"]
select_on = false
around_on = false

[[define.selectLinesDown]]
command = "selection-utilities.shrinkToActive"

[[define.selectLinesDown]]
command = "cursorMove"
args = {to = "down", by = "wrappedLine", select = true}
computedArgs = {value = "count"}

[[define.selectLinesDown]]
command = "expandLineSelection"

[[define.selectLinesUp]]
command = "selection-utilities.shrinkToActive"

[[define.selectLinesUp]]
command = "cursorMove"
args = {to = "up", by = "wrappedLine", select = true}
computedArgs = {value = "count"}

[[define.selectLinesUp]]
command = "expandLineSelection"


[bind.modes]
name = "Modes"
description = """
Larkin uses different modes (like vim). Insert is the default and it 
works the same way VSCode normally does. Upon hitting escape you enter normal
mode, wherein a variety of behaviors are available to move around and manipulate the
text.

Refer to the actions section for the various ways you can exit normal mode and
return to insert mode.

**TODO**: document the other modes
"""

[[bind.modes.items]]
name = "normal"
description = "Enter normal mode"
key = ["escape", "ctrl+["]
do = ["master-key.enterNormal", "master-key.reset"]
when = "!findWidgetVisible"
prefixes = "<all-prefixes>"

[[bind.modes.items]]
key = ["escape", "ctrl+["]
when = "suggsetWidgetVisible && editorTextFocus && !findWidgetVisible"
do = ["master-key.enterNormal", "master-key.reset"]
prefixes = "<all-prefixes>"

[[bind.modes.items]]
# by default typing keys in a mode other than insert is simply ignored
name = "ignore"
description = "this key does nothing"
key = ["<all-keys>", "shift+<all-keys>"]
do.command = "master-key.ignore"
prefixes = "<all-prefixes>"
mode = ["!insert", "!search"]
when = "editorTextFocus"

[bind.edit]
name = "Editor Commands"
description = """
Most commands are editing commands, they interact with the text editor, either by
selecting text in the editor, moving around it, manipulating text in the editor, and
so forth.
"""
default.when = "editorTextFocus && !findWidgetVisible"

[bind.edit.count]
name = "count"
description = """
The number keys are used to update the count, which affects how many times the next 
command is repeated, when relevant.
"""

[[bind.edit.count.items]]
name = "Update number with {key}"
key = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
do.command = "master-key.updateCount"
do.args.value = "{key}"
resetTransient = false
mode = "!insert" # number keys apply in all modes but insert

[bind.edit.motion]
name = "Motions"
description = "Commands that move the cursors and/or selections"
default.kind = "select"
default.mode = "normal"

[bind.edit.motion.prim]
name = "Primitive Motions"
description = "Motions fundamental to moving around in the editor."
default.do.command = "cursorMove"
default.do.computedArgs.value = "count"
default.do.computedArgs.around = "around_on"
default.do.computedArgs.select = "select_on"

[[bind.edit.motion.prim.items]]
key = "h"
name = "←"
description = "move left"
do.args.to = "left"

[[bind.edit.motion.prim.items]]
key = "j"
name = "↓"
description = "move down"
do.args.to = "down"

[[bind.edit.motion.prim.items]]
key = "k"
name = "↑"
description = "move up"
do.args.to = "up"

[[bind.edit.motion.prim.items]]
key = "l"
name = "→"
description = "move right"
do.args.to = "right"

[[bind.edit.motion.prim.items]]
key = "g j"
name = "unwrp ↓"
description = "down unwrapped line"
do.args.to = "down" 
do.args.by = "line"

[[bind.edit.motion.prim.items]]
key = "g k"
name = "unwrp ↑"
description = "up unwrapped line"
do.args.to = "down" 
do.args.by = "line"

[[bind.edit.motion.prim.items]]
key = "shift+h"
name = "start"
description = "start of line (alternates between first non-white and first)"
do = "cursorHomeSelect"

[[bind.edit.motion.prim.items]]
key = "shift+l"
name = "end"
description = "end of line"
do.command = "cursorMove"
do.args.to = "wrappedLineEnd"
do.args.select = true

[[bind.edit.motion.prim.items]]
key = "shift+g"
name = "exapnd"
description = "expand selections to full lines"
do = "expandLineSelection"

[[bind.edit.motion.prim.items]]
key = "shift+k"
name = "sel ↑"
description = "select lines upwards"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = {to = "up", by="wrappedLine", select= true}
computedArgs = {value = "count"}

[[bind.edit.motion.prim.items.do]]
command ="expandLineSelections"

[[bind.edit.motion.prim.items]]
key = "shift+j"
name = "sel ↓"
description = "select lines downwards"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = {to = "down", by="wrappedLine", select= true}
computedArgs = {value = "count"}

[[bind.edit.motion.prim.items.do]]
command ="expandLineSelections"

[[bind.edit.motion.prim.items]]
key = "g shift+k"
name = "unwrp sel ↑"
description = "select unwrapped lines upwards"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = {to = "up", by="line", select= true}
computedArgs = {value = "count"}

[[bind.edit.motion.prim.items.do]]
command ="expandLineSelections"

[[bind.edit.motion.prim.items]]
key = "g shift+j"
name = "sel ↓"
description = "select unwrapped lines downwards"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = {to = "down", by="line", select= true}
computedArgs = {value = "count"}

[[bind.edit.motion.prim.items.do]]
command ="expandLineSelections"

[[bind.edit.motion.prim]]
key = '\'
name = "→ sel"

[bind.edit.motion.mod]
name = "Modify Motion Effects"
description = "Keys that change how other motions work"
kind = "select"

[[bind.edit.motion.mod.items]]
key = "u"
name = "around"
description = """
selection commands are changed to both move start and end of a selection to surround the 
entire object (rather than extending to specified start/end point)
"""
kind = "prefix"
resetTransient = false
do.command = "master-key.prefix"
do.args = { key = "u", flag = "around_on" }

[[bind.edit.motion.mod.items]]
key = "space"
name = "hold selection"
description = """
selection commands extend the selection
"""
do.command = "master-key.set"
do.args.name = "select_on"
do.args.value = true

[[bind.edit.motion.mod.items]]
key = "r"
name = "shrink selection"
description = """
reduce all selections to length zero
"""
do = [
    "selection-utilities.shrinkToActive", 
    {command = "master-key.set", args={name="select_on", value=false}}
]

[bind.edit.motion.obj]
name = "Motions around various regex-like objects"
description = """
selection commands that move by a predefined syntactic object (e.g. word, paragraph, etc...)
"""
default.do.command = "selection-utilities.moveBy"
default.do.args.boundary = "start"
default.prefixes = ["", "u"]
default.do.args.select = "!around_on"
default.do.computedArgs.selectWhole = "around_on"

[[bind.edit.motion.obj.items]]
key = "w"
name = "subwrd →"
description = "next subword (camel/snake case)"
do.args.unit = "subword"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "e"
name = "subwrd end"
description = "next subword (camel/snake case) end"
do.args.unit = "subword"
do.computedArgs.boundary = "around_on ? 'both' : 'end'"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "shift+w"
name = "word →"
description = "next word"
do.args.unit = "word"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "shift+e"
name = "word end"
description = "next word end"
do.args.unit = "word"
do.computedArgs.boundary = "around_on ? 'both' : 'end'"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "b"
name = "subwrd ←"
description = "previous subword (camel/snake case)"
do.args.unit = "subword"
do.computedArgs.value = "-count || -1"

[[bind.edit.motion.obj.items]]
key = "shift+b"
name = "word ←"
description = "previous word"
do.args.unit = "word"
do.computedArgs.value = "-count || -1"

[[bind.edit.motion.obj.items]]
key = "u u"
name = "smart expand"
description = "Use VSCode's built-in smart expansion command"
do = "editor.action.smartSelect.expand"

[bind.edit.motion.search]
name = "Search Related Motions"
description = "Motions related to searching for text in a document"
default.do.command = "master-key.search"
default.do.args.caseSensitive = true
default.do.args.backwards = false
default.do.args.selectTillMatch = true
default.do.args.wrapAround = true

[[bind.edit.motion.search.items]]
key = "/"
name = "search"
description = "search forwards"
do.args.register = "search"

[[bind.edit.motion.search.items]]
key = "shift+/"
name = "search bk"
description = "search backwards"
do.args.register = "search"

[[bind.edit.motion.search.items]]
key = "n"
name = "→ search"
description = "Go to the next match of the search query"
do.command = "master-key.nextMatch"
do.args.register = "search"

[[bind.edit.motion.search.items]]
key = "shift+n"
name = "← search"
description = "Go to the previous match of the search query"
do.command = "master-key.previousMatch"
do.args.register = "search"

[[bind.edit.motion.search.items]]
key = "f"
name = "find char"
description = "Find the next char (include char in selection)"
do.args.acceptAfter = 1
do.computedArgs.skip = "count-1"

[[bind.edit.motion.search.items]]
key = "shift+f"
name = "find char back"
description = "Find the previous char (include char in selection)"
do.args.acceptAfter = 1
do.args.backwards = true
do.computedArgs.skip = "count-1"

[[bind.edit.motion.search.items]]
key = "t"
name = "to char"
description = "Find the next char (exclude char in selection)"
do.args.acceptAfter = 1
do.args.offset = "start"
do.computedArgs.skip = "count-1"

[[bind.edit.motion.search.items]]
key = "shift+t"
name = "to char back"
description = "Find the previous char (exclude char in selection)"
do.args.acceptAfter = 1
do.args.offset = "end"
do.args.backwards = true
do.computedArgs.skip = "count-1"

[[bind.edit.motion.search.items]]
key = "s"
name = "find char pair"
description = "To next character pair"
do.args.acceptAfter = 2
do.args.offset = "start"

[[bind.edit.motion.search.items]]
key = "shift+s"
name = "char pair back"
description = "To previous character pair"
do.args.acceptAfter = 2
do.args.offset = "start"

[[bind.edit.motion.search.items]]
key = ";"
name = "→ match"
description = "Repeat search motion forwards"
do.command = "master-key.nextMatch"
do.computedArgs.repeat = "count"

[[bind.edit.motion.search.items]]
key = "shift+;"
name = "← match"
description = "Repeat search motion backwards"
do.command = "master-key.previousMatch"
do.computedArgs.repeat = "count"

[bind.edit.motion.syntax]
name = "Motions around syntactic objects (e.g. parentheses and quotes)"
description = """
selection commands that move by a predefined syntactic object like brackets and quotes
"""

[[bind.edit.motion.syntax.items]]
key = "shift+["
name = "arnd parens"
description = "parens/brackets/braces and their contents"
do.command = "selection-utilities.expandAroundBrackets"

[[bind.edit.motion.syntax.items]]
key = "["
name = "in parens"
description = "text inside parens/brackets/braces"
do.command = "selection-utilities.expandInBrackets"

[bind.edit.action]
name = "Actions"
description = "Commands that modify the document or UI"
default.kind = "action"
default.mode = "normal"

[bind.edit.action.basic]
name = "Basic Actions"
description = "Essential actions required to edit text"

[[bind.edit.action.basic.items]]
# TODO: add documentation to these basic editor keys
key = "i"
name = "insert"
description = "Switch to insert mode (right before character)"
do = ["selection-utilities.shrinkToActive", "master-key.enterInsert"]

[[bind.edit.action.basic.items]]
key = "a"
name = "append"
description = "Switch to insert mode (right after character)"
do = ["selection-utilities.shrinkToActive", "master-key.enterInsert"]
when = "editorHasSelection"

[[bind.edit.action.basic.items]]
key = "a"
do = ["selection-utilities.shrinkToActive", "cursorRight", "master-key.enterInsert"]
when = "!editorHasSelection"

[[bind.edit.action.basic.items]]
key = "c"
name = "change"
description = """
Without a count: change selected region of text. With a count:
change up to `count` lines.
"""
when = "editorHasMultilineSelection"
do = ["deleteRight", "editor.action.insertLineBefore", "master-key.enterInsert"]

[[bind.edit.action.basic.items]]
key = "c"
when = "!editorHasMultilineSelection && editorHasSelection"
do = ["deleteRight", "master-key.enterInsert"]

[[bind.edit.action.basic.items]]
key = "c"
when = "!editorHasSelection && master-key.count <= 1"
do = ["expandLineSelection", "deleteRight", "editor.action.insertLineBefore", 
            "master-key.enterInsert" ]

[[bind.edit.action.basic.items]]
key = "c"
when = "!editorHasSelection && master-key.count > 1"
do = [{defined = "selectLinesDown"},
      "deleteRight",
      "editor.action.insertLineBefore",
      "master-key.enterInsert"]

[[bind.edit.action.basic.items]]
key = "shift+c"
name = "change to/back"
description = """Without a count: change from current char to end of line. With a count: 
change the previous `count` lines.
"""
when = "master-key.count <= 1"
do = ["selection-utilities.shrinkToActive", "deleteAllRight", "master-key.enterInsert"]

[[bind.edit.action.basic.items]]
key = "shift+c"
when = "master-key.count > 1"
do = [{defined = "selectLinesUp"}, "deleteRight", "editor.action.insertLineBefore",
       "master-key.enterInsert"]

[[bind.edit.action.basic.items]]
key = "d"
name = "delete"
description = """
Without a count: delete selected text (and store to clipboard). With a 
count, delete up to the next `count` lines and store to clipboard.
"""
when = "!editorHasSelection"
do = [{defined = "selectLinesDown"},
      "editor.action.clipboardCutAction",
      {command = "master-key.enterMode", args = {value = "normal"}}]

[[bind.edit.action.basic.items]]
key = "d"
when = "editorHasSelection"
do = ["editor.action.clipboardCutAction",
            {command = "master-key.enterMode", args = {value = "normal"}}]

[bind.edit.action.symmetric]
name = "Symmetric Operations"
description = "Operations that occur at both ends of a selection"
default.kind = "select"
default.mode = "syminsert"

[[bind.edit.action.symmetric.items]]
name = "Symmetric Insert Mode"
description = """
In this mode all commands and character insertions happen at both ends of 
the selection
"""
mode = "normal"
key = "g '"
do.command = "master-key.enterMode"
do.args.mode = "syminsert"

[[bind.edit.action.symmetric.items]]
name = "Normal"
description = "Return to normal model"
key = ["enter", "g '"]
do.command = "master-key.enterMode"
do.args.mode = "normal"

[define.symmetric_key_map]
"shift+;" = ":"
"shift+'" = "\""
"shift+/" = "?"
"shift+\\" = "|"
"shift+=" = "+"
"shift+-" = "-"
"shift+8" = "*"
"shift+7" = "&"
"shift+6" = "^"
"shift+5" = "%"
"shift+4" = "$"
"shift+3" = "#"
"shift+2" = "@"
"shift+1" = "!"
"shift+`" = "~"
";" = ";"
"'" = "'"
"," = ","
"." = "."
"/" = "/"
"=" = "="
"-" = "-"
"`" = "`"

[[bind.edit.action.symmetric.items]]
key = ["shift+;", ";", "'", "shift+'", ",", ".", "/", "shift+/", "shift+\\", 
       "=", "shift+=", "-", "shift+-", "shift+8", "shift+7", "shift+6", 
       "shift+5", "shift+4", "shift+3", "shift+2", "shift+1", "shift+`",
       "`"]
description = "Insert the character {symmetric_key_map[key]} at both ends of each selection"
do.command = "selection-utilities.insertAround"
do.args = { before = "{symmetric_key_map[key]}", after = "{symmetric_key_map[key]}"}


